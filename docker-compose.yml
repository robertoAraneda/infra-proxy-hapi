services:
  # Main reverse proxy - handles all incoming traffic
  main-nginx:
    image: nginx:alpine
    container_name: main-reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./main-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./main-nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - main_nginx_logs:/var/log/nginx
    networks:
      - proxy-network
      - keycloak-network
      - kong-network
    restart: unless-stopped
    depends_on:
      - keycloak
      - kong
      - konga

  # Keycloak PostgreSQL
  postgres:
    image: postgres:15
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - keycloak-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kong PostgreSQL
  kong-postgres:
    image: postgres:9.5
    container_name: kong-postgres
    environment:
      POSTGRES_DB: ${KONG_POSTGRES_DB}
      POSTGRES_USER: ${KONG_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KONG_POSTGRES_PASSWORD}
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
    networks:
      - kong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_POSTGRES_USER} -d ${KONG_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

   # FHIR PostgreSQL
  fhir-postgres:
    image: postgres:14.6
    container_name: fhir-postgres
    environment:
      POSTGRES_DB: ${FHIR_POSTGRES_DB}
      POSTGRES_USER: ${FHIR_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FHIR_POSTGRES_PASSWORD}
    volumes:
      - fhir_postgres_data:/var/lib/postgresql/data
    networks:
      - fhir-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${FHIR_POSTGRES_USER} -d ${FHIR_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL proxy
  postgres-proxy:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: ${PROXY_POSTGRES_DB}
      POSTGRES_USER: ${PROXY_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PROXY_POSTGRES_PASSWORD}
    volumes:
      - proxy_postgres_data:/var/lib/postgresql/data
      - ./init-proxy-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fhir-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PROXY_POSTGRES_USER} -d ${PROXY_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong migration job
  kong-migration:
    image: kong:3.6.1
    container_name: kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: ${KONG_POSTGRES_DB}
      KONG_PG_USER: ${KONG_POSTGRES_USER}
      KONG_PG_PASSWORD: ${KONG_POSTGRES_PASSWORD}
    command: kong migrations bootstrap
    depends_on:
      kong-postgres:
        condition: service_healthy
    networks:
      - kong-network
    restart: "no"

  # Kong Gateway
  kong:
    image: robertoaraneda/kong-with-plugins:1.1.0
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: ${KONG_POSTGRES_DB}
      KONG_PG_USER: ${KONG_POSTGRES_USER}
      KONG_PG_PASSWORD: ${KONG_POSTGRES_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_TRUSTED_IPS: 0.0.0.0/0,::/0
      KONG_REAL_IP_HEADER: X-Forwarded-For
      KONG_REAL_IP_RECURSIVE: "on"
    depends_on:
      kong-postgres:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    networks:
      - kong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3

  # HAPI FHIR Server
  hapi-fhir:
    image: hapiproject/hapi:v8.2.0-2 # Use the latest stable version
    container_name: hapi-fhir
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://fhir-postgres:5432/${FHIR_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${FHIR_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${FHIR_POSTGRES_PASSWORD}
      SPRING_DATASOURCE_DRIVERCLASSNAME: org.postgresql.Driver
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect
    depends_on:
      fhir-postgres:
        condition: service_healthy
    networks:
      - fhir-network
    restart: unless-stopped

  # FHIR Proxy
  fhir-proxy:
    image: robertoaraneda/fhir-proxy:v1.1
    container_name: fhir-proxy
    environment:
      PORT: ${FHIR_PROXY_PORT}
      FHIR_SERVER_URL: ${FHIR_SERVER_URL}
      LOG_LEVEL: ${FHIR_LOG_LEVEL}
      ENVIRONMENT: ${FHIR_ENVIRONMENT}
      LOG_DIR: ${FHIR_LOG_DIR}
      DATABASE_URL: ${FHIR_DATABASE_URL}
      LOG_TO_DB: ${FHIR_LOG_TO_DB}
      MAX_FILE_SIZE: ${FHIR_MAX_FILE_SIZE}
      MAX_BACKUPS: ${FHIR_MAX_BACKUPS}
      JWT_SECRET: ${FHIR_JWT_SECRET}
      JWT_SKIP_VERIFY: ${FHIR_JWT_SKIP_VERIFY}
      USE_CUSTOM_VALIDATION_RESPONSE: ${FHIR_USE_CUSTOM_VALIDATION_RESPONSE}
    depends_on:
      fhir-postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - fhir-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  # Konga - Kong Admin GUI
  konga:
    image: pantsel/konga
    container_name: konga
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://${KONG_POSTGRES_USER}:${KONG_POSTGRES_PASSWORD}@kong-postgres:5432/konga
      KONGA_LOG_LEVEL: warn
      TOKEN_SECRET: some_secret_token
      NODE_ENV: development
      KONGA_HOOK_TIMEOUT: 10000
    depends_on:
      kong-postgres:
        condition: service_healthy
    networks:
      - kong-network
      - proxy-network
    restart: unless-stopped

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: true
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_TRANSACTION_XA_ENABLED: false
    command: start
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keycloak-network
    restart: unless-stopped

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: main-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL} -d ${KEYCLOAK_HOSTNAME} -d ${KONG_HOSTNAME} -d ${KONGA_HOSTNAME} --agree-tos
    depends_on:
      - main-nginx

volumes:
  postgres_data:
    driver: local
  proxy_postgres_data:
    driver: local
  kong_postgres_data:
    driver: local
  fhir_postgres_data:
    driver: local
  main_nginx_logs:
    driver: local

networks:
  proxy-network:
    driver: bridge
  keycloak-network:
    driver: bridge
  kong-network:
    driver: bridge
  fhir-network:
    driver: bridge